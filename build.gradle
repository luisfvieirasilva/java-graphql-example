plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.netflix.dgs.codegen' version '6.1.5'
    id 'com.apollographql.apollo3' version '4.0.0-beta.5'
    id 'application'
    id 'war'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release')
    }
}

dependencies {
    implementation 'com.apollographql.apollo3:apollo-runtime-java'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def test = tasks.named('test') {
    useJUnitPlatform {
        filter {
            includeTestsMatching "*Test"
            excludeTestsMatching "*IntegrationTest"
        }
    }
}

def integrationTest = tasks.register("integrationTest", Test) {
    group = "verification"
    description = "Runs the integration tests."
    useJUnitPlatform {
        filter {
            includeTestsMatching '*IntegrationTest'
        }
    }
    mustRunAfter test
}

tasks.named('check') {
    dependsOn integrationTest
}


generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/schema"]
    packageName = 'com.example.users.codegen'
    generateClient = true
}

apollo {
    service("test") {
        srcDir(file("${projectDir}/src/test/graphql/test"))
        packageName.set("com.example.test")
        generateKotlinModels.set(false)
        generateDataBuilders.set(true)
        schemaFile.set(file("${projectDir}/src/main/resources/schema/schema.graphqls"))
    }
}

application {
    mainClass = 'com.example.users.UsersApplication'
}
